#!/bin/bash
# Copyright 2015 The Project Buendia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at: http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distrib-
# uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
# specific language governing permissions and limitations under the License.

set -e; . /usr/share/buendia/utils.sh
export MYSQL_USER=$OPENMRS_MYSQL_USER
export MYSQL_PASSWORD=$OPENMRS_MYSQL_PASSWORD
name=$(basename $0)
root=$1
limit=$2

if [ "$root" = "" -o "$1" = "-h" ]; then
    echo "Usage: $0 <backup-root-path> [<kilobytes>]"
    echo "       $0 <block-device> [<percentage>]"
    echo
    echo "Backs up the current OpenMRS database, Buendia configuration,"
    echo "and installed Buendia packages under the specified path, capturing"
    echo "at most one backup per day and replacing any backup made earlier"
    echo "that same day.  If a block device is given, mounts the block device"
    echo "and backs up to the 'buendia' directory on the device."
    echo
    echo "If the second argument is given, removes older backups in the"
    echo "specified backup directory as necessary to keep its total space"
    echo "usage less than the specified amount; half the space is reserved"
    echo "for database dumps and half for software packages.  For devices,"
    echo "this size is specified as a percentage of the filesystem size."
    exit 1
fi

# Check if there's anything to back up. If not, notify and exit early.
if buendia-db-is-empty >/dev/null; then
    echo "The database is still empty; skipping backup."
    exit 0
fi

# We use MD5 hashes to detect if files are unchanged and don't need recopying.
if which md5sum >/dev/null; then
    SUM=md5sum
elif which md5 >/dev/null; then
    SUM=md5
elif which cksum >/dev/null; then
    SUM=cksum
elif which sum >/dev/null; then
    SUM=sum
fi

# Use the file descriptor to place a runtime lock, to prevent two updates
# happening simultaneously. When the process exits the file descriptor will be
# lost (unlike a file). This prevents multiple backups, or backup and restore
# from happening simultaneously.
exec 9> /var/run/lock/buendia-backup
if ! flock -n 9; then
    echo "Backup or restore already running; not starting."
    exit 1
fi

# Keep one backup per day.  (If you need to maintain a backup that is
# much less than a day old, run buendia-backup multiple times per day.)
backup_id=$(date +'%Y-%m-%d')
tmp="/tmp/buendia-backup.$$"

# Mount the given device, if necessary.
if [ -b "$root" ]; then
    echo "$root is a block device; mounting..."
    mnt_dir="/mnt/$name.$$.$(basename $root)"
    mkdir -p "$mnt_dir"
    mount "$root" "$mnt_dir"

    root=$mnt_dir
    final_dir="$root/backup.$backup_id"
    new_dir="$root/new-$$.$backup_id"
    old_dir="$root/old-$$.$backup_id"
    final_packages="$root/packages"
    new_packages="$new_dir/packages"

    trap 'rm -rf "$tmp" "$new_dir" "$old_dir" "$new_packages"; umount "$mnt_dir" || true; rm -rf "$mnt_dir"' EXIT

    if [ -n "$limit" ]; then
        percent=limit
        size=$(df -P -k "$root" | grep -v ^File | grep -o ' [0-9]\+' | head -1)
        limit=$(($size*limit/100))
        echo "Limiting usage to $limit kb (${percent}% of $size-kb filesystem)."
    fi

elif [ -d "$root" -o ! -e "$root" ]; then
    mkdir -p "$root"
    final_dir="$root/backup.$backup_id"
    new_dir="$root/new-$$.$backup_id"
    old_dir="$root/old-$$.$backup_id"
    final_packages="$root/packages"
    new_packages="$new_dir/packages"
    trap 'rm -rf "$tmp" "$new_dir" "$old_dir" "$new_packages"' EXIT

else
    echo "$root is neither a block device nor a directory."
    exit 1
fi

# Prepare some empty temporary directories.
rm -rf "$tmp" "$new_dir" "$old_dir" "$new_packages"
mkdir -p "$tmp" "$new_dir" "$old_dir" "$new_packages"

# First we'll write everything to $new_dir, then move it to $final_dir.  The
# move is atomic because $new_dir is in the same filesystem as $root.
echo "Backing up to $final_dir..."

# Mark the new backup subdirectory as a directory to keep.  Since
# buendia-limit removes the oldest files first, the presence of this file
# means that none of the contents have been removed by buendia-limit.
touch "$new_dir/keep"
sleep 1  # ensure that keep has the uniquely lowest timestamp in the directory

# --- Dump the printable version of the patient charts.
curl -u "$SERVER_OPENMRS_USER:$SERVER_OPENMRS_PASSWORD" \
  http://127.0.0.1:9000/openmrs/module/projectbuendia/openmrs/printable.form \
  > "$tmp/patient_charts.html"

status=$?

# Junk paths, password protect with the OpenMRS password.
zip -j --password="$SERVER_OPENMRS_PASSWORD" \
  "$new_dir/patient_charts.zip" "$tmp/patient_charts.html"

# ---- Back up the Buendia configuration.

echo
echo "Saving Buendia configuration..."
# Back up only those configuration directories which already exist; don't worry
# about any which might be missing.
config_paths=$(ls -d /usr/share/buendia/{counts,distilled,openmrs,profiles,site} || true)
tar cfz "$new_dir/buendia.tar.gz" --exclude '*.omod' $config_paths
encrypt_file "$new_dir/buendia.tar.gz"
rm "$new_dir/buendia.tar.gz"
ls -l "$new_dir/buendia.tar.gz.enc"

# ---- Back up the MySQL database.

echo
echo "Dumping MySQL database..."
if ! buendia-mysql-dump openmrs "$new_dir/openmrs.zip" >"$tmp/out" 2>&1; then
    cat "$tmp/out"
    echo "buendia-mysql-dump failed!"
    exit 1
fi
encrypt_file "$new_dir/openmrs.zip"
rm "$new_dir/openmrs.zip"
ls -l "$new_dir/openmrs.zip.enc"

# ---- Back up the package list and non-base packages.

# Examine what packages are installed.
base_list=/etc/base.packages.list
dpkg-query -W --showformat '${Package}=${Version}\n' | sort > "$new_dir/all.list"
if [ -f "$base_list" ]; then
    # Note the new packages that have been added beyond the base package list.
    comm -2 -3 "$new_dir/all.list" "$base_list" | sort > "$new_dir/buendia.list"
else
    # Base package list missing?  Just keep all the "buendia-*" packages.
    grep '^buendia-' "$new_dir/all.list" > "$new_dir/buendia.list"
fi
packages=($(cat "$new_dir/buendia.list"))  # safe, as each line has no spaces

s=s; [ $packages = 1 ] && s=
echo
echo Backing up ${#packages} package$s...

# Copying may take some time, so first copy to $new_packages, a temporary
# directory that's under $new_dir, in the same filesystem as $root.
for package in "${packages[@]}"; do
    echo -n "$package: "
    name=$(echo "$package" | tr = _ | sed -e 's/:/%3a/g')
    deb_file=($(ls -t -1 /var/cache/apt/archives/$name*.deb 2>/dev/null | head -1))
    filename=$(basename "$deb_file")
    final_file="$final_packages/$filename"
    if [ -f "$deb_file" -a -f "$final_file" ]; then
        deb_sum=$($SUM < "$deb_file")
        final_sum=$($SUM < "$final_file")
        if [ "$deb_sum" = "$final_sum" ]; then
            echo "$deb_file is unchanged"
            continue
        fi
        echo "copying $deb_file"
        cp -p "$deb_file" "$new_packages" || true
    else
        echo "no .deb file found"
    fi
done

echo
echo Backing up APK files...
for apk_file in /usr/share/buendia/packages/*.apk; do
    if [ -f "$apk_file" ]; then
        basename "$apk_file"
        cp -p "$apk_file" "$new_packages"
    else
        echo "No APK files found."
    fi
done

# ---- Commit the backup by moving the directory atomically to its final place.

# First make sure there is nothing in the way.
if [ -e "$final_dir" ]; then
    rm -rf "$old_dir"
    mv "$final_dir" "$old_dir"
fi

# Then make sure everything is written to the target filesystem.
sync

# Now atomically commit the backup.
mv "$new_dir" "$final_dir"
sync

# If we're backing up to a block device, make sure that the system key is
# copied there, now that the most recent backup has been committed.
#
# This may overwrite the key used to create earlier backups, which is why
# we waited until this point to copy the key.
if [ -n "$mnt_dir" ]; then
    echo "Backing up system key to external storage."
    cp /usr/share/buendia/system.key "$mnt_dir"
    sync
fi

# ---- Sweep all the packages in completed backups into a common directory.

echo
echo Sweeping packages into packages/ directory...

# All the backups at the same backup root share one directory for packages,
# since packages can be large and new ones are infrequently added.
# This sweeping process is safely interruptible because the moving of each
# individual file move is atomic, and if packages are left behind because
# the sweep is interrupted, they will get picked up on the next sweep.
mkdir -p "$final_packages"
mv "$root"/backup.*/packages/* "$final_packages" 2>/dev/null || true

# Remove all the empty package directories.
rmdir "$root"/backup.*/packages 2>/dev/null || true

# ---- Limit the total size of backups.

echo
echo Cleaning up old or interrupted backups...

if [ -n "$limit" ]; then
  half_limit=$(($limit / 2))
  if [[ $half_limit > 0 ]]; then
    buendia-limit $half_limit "$root"/packages
    buendia-limit $half_limit "$root"/backup.*
    buendia-limit $limit "$root"/packages
  fi
fi

# ---- Fully remove any backups that were partially removed by buendia-limit.

for dir in "$root"/backup.*; do
    if [ -d "$dir" -a ! -e "$dir"/keep ]; then
        rm -rf "$dir"
    fi
done

echo
echo "Done!  Result:"
echo
ls -alR "$final_dir" "$final_packages"

echo
echo "All remaining backup directories:"
du "$root"/backup.*
