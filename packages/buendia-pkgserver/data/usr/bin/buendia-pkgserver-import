#!/bin/bash
# Copyright 2015 The Project Buendia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at: http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distrib-
# uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
# specific language governing permissions and limitations under the License.

set -e; . /usr/local/opt/buendia/utils.sh
name=$(basename $0)
source="$1"

if [ "$1" = "-h" -o "$source" = "" ]; then
    echo "Usage: $0 [<device>|<directory>]"
    echo
    echo "Imports Buendia bundle files into the local package server."
    echo "Searches for files named projectbuendia-all-<anything>.zip or"
    echo "projectbuendia-<site-id>-<anything>.zip in the given directory"
    echo "or in the root directory of the given mountable device, and"
    echo "applies them to the system."
    echo
    echo "A bundle file is a zip file containing:"
    echo "  - .deb or .apk files, which will be placed at"
    echo "    /usr/local/opt/buendia/packages and served by the package server"
    echo "  - settings files with names of the form NN-anything (where NN is"
    echo "    a number), which will be copied into /usr/local/opt/buendia/site"
    echo "  - a file named commands.sh, which will be executed as a bash"
    echo "    script by root with the unpacked bundle as the current directory"
    echo
    echo "After each bundle is detected and unpacked, it is renamed by"
    echo "prepending 'installed-' so that it will not be automatically"
    echo "installed again.  However, bundles whose names contain '-reuse-'"
    echo "are special and get renamed by incrementing a number in the"
    echo "filename, and nothing is prepended, so they can be used again."
    exit 1
fi

# Use the file descriptor to place a runtime lock, to prevent two updates
# happening simultaneously. When the process exits the file descriptor will
# be lost (unlike a file). This allows cron to poll every minute while still
# having a runtime longer than one minute.
exec 9> /var/run/lock/$name
if ! flock -n 9; then
    echo "$name already running; not starting."
    exit 1
fi

# Constructs the new name to which a bundle file is renamed after processing.
function adjust_filename() {
    filename="$1"
    (
        shopt -s nocasematch
        if [[ $filename =~ ^(.*-reuse)-?([0-9]*)([-.].*)$ ]]; then
            name=${BASH_REMATCH[1]}
            count=${BASH_REMATCH[2]}
            rest=${BASH_REMATCH[3]}
            let count=count+1
            echo $name-$count$rest
        else
            echo installed-$filename
        fi
    )  # restore shopt nocasematch
}

# Create temporary directories for mounting and extraction. $pkgdir should be
# located on the same filesystem as /usr/local/opt/buendia/packages so that any
# packages dropped there can be moved into the repo instantaneously.
name=$(basename $0)
exdir=/tmp/$name.ex.$$
pkgdir=/usr/local/opt/buendia/packages.import.$$
rm -rf $exdir $pkgdir
mkdir -p $exdir $pkgdir

# Mount the given device, if necessary.
if [ -b "$source" ]; then
    echo "$source is a block device; mounting..."
    mntdir=/mnt/$name.$$
    mkdir -p $mntdir
    mount $source $mntdir
    echo "Mounted $source at $mntdir."
    trap 'rm -rf $exdir $pkgdir; cd /; fuser -m $mntdir || true; umount $mntdir && rm -rf $mntdir || true; buendia-led red off || true; buendia-led yellow off || true' EXIT
    source="$mntdir"

elif [ -d "$source" ]; then
    echo "$source is a directory; scanning..."
    trap 'rm -rf $exdir $pkgdir; buendia-led red off || true; buendia-led yellow off || true' EXIT

else
    echo "$source is neither a block device nor a directory."
    exit 1
fi

# Search the directory for bundles.
cd "$source"

bundles=(projectbuendia-all{,-*}.zip)  # bundles addressed to all sites
if [ -n "$SITE_ID" ]; then
    bundles+=(projectbuendia-$SITE_ID{,-*}.zip)  # bundles specific to this site
fi

for file in "${bundles[@]}"; do
    if [ -f "$file" ]; then
        # Processing update: red only
        buendia-led red on || true
        echo "Unpacking bundle: $file"
        if unzip -j -d "$exdir" "$file"; then
            unpacked+=("$file")
        fi
    fi
done

# Process the unpacked bundles.
if [ -n "$unpacked" ]; then
    (
        cd "$exdir"

        echo
        echo "$(date) - Unpacked for importing:"
        command ls -l
        echo

        # Move packages into the repo.
        debs=(*.deb)
        if [ -f "${debs[0]}" ]; then
            cp *.deb $pkgdir || true
        else
            debs=()
        fi
        apks=(*.apk)
        if [ -f "${apks[0]}" ]; then
            cp *.apk $pkgdir || true
        else
            apks=()
        fi
        let count=${#debs}+${#apks} || true  # let exits with 1 if result is 0

        if [ "$count" -gt 0 ]; then
            # Installing update: red and yellow
            buendia-led red on || true
            buendia-led yellow on || true
            s=s; [ "$count" == 1 ] && s= || true
            if mv $pkgdir/* /usr/local/opt/buendia/packages; then
                echo "Imported $count package$s."
            else
                echo "Error trying to import $count package$s; continuing."
            fi

            # Regenerate indexes.
            buendia-pkgserver-index-debs || true
            buendia-pkgserver-index-apks || true
            chmod -R a+rX /usr/local/opt/buendia/packages || true
        fi

        # Copy over site settings files.
        for file in [0-9][0-9]-*; do
            if [ -f "$file" ]; then
                # Installing update: red and yellow
                buendia-led red on || true
                buendia-led yellow on || true
                target=/usr/local/opt/buendia/site/"$file"
                if cp "$file" "$target"; then
                    echo "Installed $target."
                else
                    echo "Error trying to copy file to $target; continuing."
                fi
                settings_changed=1
            fi
        done

        # Mark unpacked bundles done now.  If reconfiguration scripts or
        # shell commands fail below, we still want to mark the bundles done,
        # to avoid repeatedly executing a broken script.
        cd "$source"
        for file in "${unpacked[@]}"; do
            mv "$file" "$(adjust_filename "$file")" || true
        done

        # Now apply new settings.
        cd "$source"
        if [ -n "$settings_changed" ]; then
            echo "Settings changed.  Files:"
            ls -l /usr/local/opt/buendia/site
            echo "Applying new settings:"
            buendia-settings || true
            # Applying changes: red and yellow
            buendia-led red on || true
            buendia-led yellow on || true
            buendia-reconfigure || true
        fi

        # Look for shell commands.
        cd "$exdir"
        if [ -f commands.sh ]; then
            echo "Executing shell script:"
            # Doing shell commands: red and yellow
            buendia-led red on || true
            buendia-led yellow on || true
            bash -x commands.sh || true
        fi
    ) 2>&1 | tee -a buendia-import.log
else
    echo "No bundles found."
fi
